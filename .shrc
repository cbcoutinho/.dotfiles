
if [ -d $HOME/OpenFOAM ]
then
	# OpenFOAM Aliases
	if test -n "$(find ~/OpenFOAM -maxdepth 1 -type d -name 'OpenFOAM-*' -print -quit)"
	then
		OF_DIR=$HOME/OpenFOAM
	else
		OF_DIR=/opt/OpenFOAM
	fi
	#OF_DIR=`[ -d $HOME/OpenFOAM ] && echo $HOME/OpenFOAM || echo /opt/OpenFOAM`
	alias ofdev="source $OF_DIR/OpenFOAM-dev/etc/bashrc $FOAM_SETTINGS"
	alias of5x="source $OF_DIR/OpenFOAM-5.x/etc/bashrc $FOAM_SETTINGS"
	alias of4x="source $OF_DIR/OpenFOAM-4.x/etc/bashrc $FOAM_SETTINGS"
	alias of30x="source $OF_DIR/OpenFOAM-3.0.x/etc/bashrc $FOAM_SETTINGS"
	alias of1712="source $OF_DIR/OpenFOAM-v1712/etc/bashrc $FOAM_SETTINGS"

	alias fe40="source $HOME/foam/foam-extend-4.0/etc/bashrc"
fi

# Python path
# PATH="$HOME/anaconda3/bin:$PATH"
alias ana="export PATH=$HOME/anaconda3/bin:$PATH"
#PYTHONPATH="$HOME/Projects":$PYTHONPATH

# added by travis gem
[ -f $HOME/.travis/travis.sh ] && source $HOME/.travis/travis.sh

# Rust-related env vars
if command -v $HOME/.cargo/bin/rustc > /dev/null 2>&1; then
	export PATH="$HOME/.cargo/bin":$PATH
    # Rust directory
    LD_LIBRARY_PATH="$(rustc --print sysroot)/lib":$LD_LIBRARY_PATH # For rustfmt
    export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src" # For racer
fi


# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
if [[ -s "$HOME/.rvm/scripts/rvm" ]]
then
	source "$HOME/.rvm/scripts/rvm"
	export PATH="$HOME/.rvm/bin":$PATH
else
	echo "No rvm found, execute the following:"
	echo "	curl -sSL https://get.rvm.io | bash -s stable"
fi
# Load RVM into a shell session *as a function*

# Ruby/Gem bin
if command -v ruby >/dev/null && command -v gem >/dev/null; then
    export PATH="$(ruby -rrubygems -e 'puts Gem.user_dir')/bin:$PATH"
fi


# gmake flags
command -v nproc >/dev/null && export MAKEFLAGS="$MAKEFLAGS -j`nproc`"
command -v nproc >/dev/null && export OMP_NUM_THREADS=`nproc`

# GCC variables
export FC=gfortran
export CC=gcc
export CXX=g++

# Node Version Manager (NVM)
export NVM_DIR="$HOME/Software/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"

export PATH
export LIBRARY_PATH
export LD_LIBRARY_PATH
export PYTHONPATH

# Fix PATH, LIBRARY_PATH, LD_LIBRARY_PATH due to possible 'blanks'
export PATH=$(echo $PATH | sed -E -e 's/^:*//' -e 's/:*$//' -e 's/:+/:/g')
export LIBRARY_PATH=$(echo $LIBRARY_PATH | sed -E -e 's/^:*//' -e 's/:*$//' -e 's/:+/:/g')
export LD_LIBRARY_PATH=$(echo $LD_LIBRARY_PATH | sed -E -e 's/^:*//' -e 's/:*$//' -e 's/:+/:/g')

# CMake repository build (need v3.7+ for learn_dg and Fortran submodules)
export CMAKE_PREFIX_PATH="$LD_LIBRARY_PATH"


# extract archives
function extract()
{
    set -x
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1     ;;
      *.tar.gz)    tar xvzf $1     ;;
      *.bz2)       bunzip2 $1      ;;
      *.rar)       unrar x $1      ;;
      *.gz)        gunzip $1       ;;
      *.tar)       tar xvf $1      ;;
      *.tbz2)      tar xvjf $1     ;;
      *.tgz)       tar xvzf $1     ;;
      *.zip)       unzip $1 -d `echo $1 | sed 's/\.zip//g'` ;;
      *.Z)         uncompress $1   ;;
      *.7z)        7z x $1         ;;
      *)           echo "'$1' cannot be extracted via >extract<" ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}


# ls aliases
alias ls="ls --group-directories-first"
alias ll="ls -l"
alias l="ls -l -a"
alias exa="exa --group-directories-first"

# basic utils
alias rm="rm -iv"
alias cp="cp -iv"
alias mv="mv -iv"
alias tree="tree -a -I '.git' -F"

# prevents accidentally clobbering files
alias mkdir="mkdir -p"

# pretty-print of some PATH variables
#alias path="echo -e ${PATH//:/\\\n}"
#alias libpath="echo -e ${LD_LIBRARY_PATH//:/\\\n}"
function path () {
	echo $PATH | sed 's/:/\n/g'
}

function libpath () {
	echo $LD_LIBRARY_PATH | sed 's/:/\n/g'
}

# ayy lmao
alias qutebrowser="qutebrowser --backend webengine"
alias chromium="chromium --disk-cache-dir=/tmp/cache"
alias vi="nvim"
alias vim="nvim"
export EDITOR="nvim"
export VISUAL="nvim"

command -v hub && eval "$(hub alias -s)"
