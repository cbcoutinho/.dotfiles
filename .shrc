# Sudo functions + ~/bin for tumbleweed?
PATH="/usr/sbin:$HOME/bin:$HOME/.local/bin":$PATH
LD_LIBRARY_PATH="$HOME/.local/lib:$HOME/.local/lib64":$LD_LIBRARY_PATH
MANPATH="$HOME/.local/share/man":$MANPATH

# OpenFOAM Aliases
alias ofdev="source $HOME/OpenFOAM/OpenFOAM-dev/etc/bashrc $FOAM_SETTINGS"
alias of5x="source $HOME/OpenFOAM/OpenFOAM-5.x/etc/bashrc $FOAM_SETTINGS"
alias of4x="source $HOME/OpenFOAM/OpenFOAM-4.x/etc/bashrc $FOAM_SETTINGS"
alias of30x="source $HOME/OpenFOAM/OpenFOAM-3.0.x/etc/bashrc $FOAM_SETTINGS"

alias fe40="source $HOME/foam/foam-extend-4.0/etc/bashrc"

# Python path
# PATH="$HOME/anaconda3/bin:$PATH"
alias ana="export PATH=$HOME/anaconda3/bin:$PATH"
#PYTHONPATH="$HOME/Projects":$PYTHONPATH

# added by travis gem
[ -f $HOME/.travis/travis.sh ] && source $HOME/.travis/travis.sh

PATH="$HOME/.cargo/bin":$PATH
if command -v rustc > /dev/null 2>&1; then
    # Rust directory
    LD_LIBRARY_PATH="$(rustc --print sysroot)/lib":$LD_LIBRARY_PATH # For rustfmt
    export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src" # For racer
fi

# Ruby/Gem bin
if command -v ruby >/dev/null && command -v gem >/dev/null; then
    PATH="$(ruby -rubygems -e 'puts Gem.user_dir')/bin:$PATH"
fi

# GCC development directories
# PATH="$HOME/Software/gcc/install/bin":$PATH
# LIBRARY_PATH="$HOME/Software/gcc/install/lib64/gcc/x86_64-pc-linux-gnu/lib64":$LIBRARY_PATH
# LD_LIBRARY_PATH="$HOME/Software/gcc/install/lib64/gcc/x86_64-pc-linux-gnu/8.0.0":$LD_LIBRARY_PATH

# Dakota directories
PATH="$HOME/Software/dakota/install/bin:$HOME/Software/dakota/install/test":$PATH
LD_LIBRARY_PATH="$HOME/Software/dakota/install/lib":$LD_LIBRARY_PATH
PYTHONPATH="$HOME/Software/dakota/install/share/dakota/Python":$PYTHONPATH

# HDF5 directory
PATH="$HOME/Software/hdf5/install/bin":$PATH
LIBRARY_PATH="$HOME/Software/hdf5/install/lib64":$LIBRARY_PATH
LD_LIBRARY_PATH="$HOME/Software/hdf5/install/lib64":$LD_LIBRARY_PATH

# CUDA directory
PATH="/usr/local/cuda/bin":$PATH
LIBRARY_PATH="/usr/local/cuda/lib64":$LIBRARY_PATH
LD_LIBRARY_PATH="/usr/local/cuda/lib64":$LD_LIBRARY_PATH

# CMake repository build (need v3.7+ for learn_dg and Fortran submodules)
export CMAKE_PREFIX_PATH=$LD_LIBRARY_PATH

# PGI Community edition
#PATH="$HOME/Software/pgice/linux86-64/17.4/bin":$PATH

# Microsoft SQL Server stuff, based on instructions from:
#   https://docs.microsoft.com/en-us/sql/connect/odbc/linux/installing-the-microsoft-odbc-driver-for-sql-server-on-linux
#
# The steps to install the sql driver are essentially these:
#   su
#   zypper ar https://packages.microsoft.com/config/sles/12/prod.repo
#   exit
#   sudo zypper install msodbcsql mssql-tools unixODBC-devel
PATH="/opt/mssql-tools/bin":$PATH

# Salome directory
PATH="$HOME/Software/Salome/appli_V8_2_0":$PATH

# ParaView directory
# *** ParaView contains six 1.7.2, whereas matplotlib 2.10 needs system six 1.11 ***
# PYTHONPATH="$HOME/Software/ParaView/install/lib/paraview-5.4":$PYTHONPATH
# PYTHONPATH="$HOME/Software/ParaView/install/lib/paraview-5.4/site-packages":$PYTHONPATH
# export PYTHONSTARTUP="$HOME/.pythonrc" # For tab-completion in pvpython


# Pointwise directories
LD_LIBRARY_PATH="/opt/Pointwise/PointwiseV18.0R4/linux_x86_64/bin":$LD_LIBRARY_PATH
LD_LIBRARY_PATH="/opt/Pointwise/PointwiseV18.0R4/linux_x86_64/lib":$LD_LIBRARY_PATH

# make flags
export MAKEFLAGS="$MAKEFLAGS -j`nproc`"
export OMP_NUM_THREADS=`nproc`

# GCC variables
export FC=gfortran
export CC=gcc
export CXX=g++

# Go-related paths
export GOPATH="$HOME/.go"
PATH="$GOPATH/bin":$PATH

# Node Version Manager (NVM)
export NVM_DIR="$HOME/Software/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"

# Pip save wheels cache
[ -d "$HOME/.cache/pip/wheelhouse" ] || mkdir $HOME/.cache/pip/wheelhouse
export STANDARD_CACHE_DIR="${XDG_CACHE_HOME:-${HOME}/.cache}/pip"
export WHEELHOUSE="${STANDARD_CACHE_DIR}/wheelhouse"
export PIP_FIND_LINKS="file://${WHEELHOUSE}"
export PIP_WHEEL_DIR="${WHEELHOUSE}"

# Matlab use system java later than 1.7 because graphics issues
# NOTE: 2017b upgraded to java 1.8
#export JAVA_HOME=/usr/lib64/jvm/java-1.8.0-openjdk
#export MATLAB_JAVA=$JAVA_HOME/jre

# extract archives
function extract()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1     ;;
      *.tar.gz)    tar xvzf $1     ;;
      *.bz2)       bunzip2 $1      ;;
      *.rar)       unrar x $1      ;;
      *.gz)        gunzip $1       ;;
      *.tar)       tar xvf $1      ;;
      *.tbz2)      tar xvjf $1     ;;
      *.tgz)       tar xvzf $1     ;;
      *.zip)       unzip $1        ;;
      *.Z)         uncompress $1   ;;
      *.7z)        7z x $1         ;;
      *)           echo "'$1' cannot be extracted via >extract<" ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

# ls aliases
alias ls="ls --group-directories-first"
alias ll="ls -l"
alias l="ls -l -a"
alias exa="exa --group-directories-first"

# basic utils
alias rm="rm -iv"
alias cp="cp -iv"
alias mv="mv -iv"

# prevents accidentally clobbering files
alias mkdir="mkdir -p"

# pretty-print of some PATH variables
alias path="echo -e ${PATH//:/\\\n}"
alias libpath="echo -e ${LD_LIBRARY_PATH//:/\\\n}"

# ayy lmao
alias qutebrowser="qutebrowser --backend webengine"
alias chromium="chromium --disk-cache-dir=/tmp/cache"
alias vi="nvim"
alias vim="nvim"
export EDITOR="nvim"

eval "$(hub alias -s)"

export PATH
export LIBRARY_PATH
export LD_LIBRARY_PATH
export PYTHONPATH
